{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/css/datepicker-bs5.min.css">
        <link rel="stylesheet" href="/static/css/styles.css">
    </head>
    <body>
    <nav class="navbar navbar-expand-lg bg-dark" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Rooms
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/generals-quaters">General's Quarters</a></li>
                            <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
        {{block "content" .}}
        {{end}}
    <div class="row my-footer">
        <div class="col">
            Left
        </div>
        <div class="col">
            Middle
        </div>
        <div class="col">
            Right
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.3/dist/js/datepicker-full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    {{block "js" .}}
    {{end}}
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields

        let attention = Prompt();

        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                        // notifyModal("Error","Please choose a start and end date","error","Ok")
                        attention.error({title: "Error", msg: "Please choose a start and end date"})
                    }

                    form.classList.add('was-validated')
                }, false)
            })
        })()

        function notifyModal(title, text, icon, confirmationButtonText){
            Swal.fire({
                title: title,
                text: text,
                icon: icon,
                confirmButtonText: confirmationButtonText
            })
        }

        function Prompt(){
            let toast = function(c){
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }

            let success = function(c){
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c;

                Swal.fire({
                    icon: "success",
                    title: title,
                    text: msg,
                    footer: footer
                })
            }

            let error = function(c){
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c;

                Swal.fire({
                    icon: "error",
                    title: title,
                    text: msg,
                    footer: footer
                })
            }

            async function custom(c){
                const {
                    msg = "",
                    title = "",
                } = c;

                const { value: formValues } = await Swal.fire({
                    title: title,
                    html: msg,
                    focusConfirm: false,
                    showCancelButton: true,
                    didOpen: ()=>{
                        const elem = document.getElementById("reservation-dates-modal");
                        const rp = new DateRangePicker(elem, {
                            showOnFocus: false,
                            orientation: "top",
                        })
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById("start").value,
                            document.getElementById("end").value
                        ]
                    }
                })

                if (formValues) {
                    Swal.fire(JSON.stringify(formValues))
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }
        }

    </script>
    </body>
    </html>
{{end}}